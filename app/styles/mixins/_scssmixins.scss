
/* BORDER RADIUS */
@mixin border-radius($radius: 5px) {
    -moz-border-radius:    $radius;
    -webkit-border-radius: $radius;
    border-radius:         $radius;
}


/* BOX */
@mixin box($orient: horizontal, $pack: center, $align: center) {
    display: -webkit-box;
    display: -moz-box;
    display: box;

    -webkit-box-orient: $orient;
    -moz-box-orient:    $orient;
    box-orient:         $orient;

    -webkit-box-pack: $pack;
    -moz-box-pack:    $pack;
    box-pack:         $pack;

    -webkit-box-align: $align;
    -moz-box-align:    $align;
    box-align:         $align;
}

/* BOX RGBA */
@mixin box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C) {
  background-color: transparent;
  background-color: rgba($r, $g, $b, $opacity);
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color}',endColorstr='#{$color}');
            zoom:   1;
}


/* BOX SHADOW */
@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $inset: "") {
  @if ($inset != "") {
    -webkit-box-shadow: $inset $x $y $blur $color;
    -moz-box-shadow:    $inset $x $y $blur $color;
    box-shadow:         $inset $x $y $blur $color;
  } @else {
    -webkit-box-shadow: $x $y $blur $color;
    -moz-box-shadow:    $x $y $blur $color;
    box-shadow:         $x $y $blur $color;
  }
}

/* BOX SIZING */
@mixin box-sizing($type: border-box) {
    -webkit-box-sizing:   $type;
    -moz-box-sizing:      $type;
    box-sizing:           $type;
}

/* COLUMNS */
@mixin columns($count: 3, $gap: 10) {
    -webkit-column-count: $count;
    -moz-column-count:    $count;
    column-count:         $count;

    -webkit-column-gap:   $gap;
    -moz-column-gap:      $gap;
    column-gap:           $gap;
}

@mixin perspective($depth: 250px) {

    -webkit-perspective:   $depth;
    -moz-perspective:      $depth;
    perspective:           $depth;
}

/* DOUBLE BORDERS */
@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) {
    border: 1px solid $colorOne;

    -webkit-box-shadow: 0 0 0 1px $colorTwo;
    -moz-box-shadow:    0 0 0 1px $colorTwo;
    box-shadow:         0 0 0 1px $colorTwo;

    @include border-radius( $radius );
}

/* FLEX */
@mixin flex($value: 1) {
    -webkit-box-flex: $value;
    -moz-box-flex:    $value;
    box-flex:         $value;
}

/* FLIP */
@mixin flip($scaleX: -1) {
    -moz-transform:    scaleX($scaleX);
    -o-transform:      scaleX($scaleX);
    -webkit-transform: scaleX($scaleX);
    transform:         scaleX($scaleX);
    filter:            FlipH;
    -ms-filter:        "FlipH";
}

/* FONT FACE */
@mixin font-face($fontFamily: myFont, $eotFileSrc: 'myFont.eot', $woffFileSrc: 'myFont.woff', $ttfFileSrc: 'myFont.ttf') {
  font-family: $fontFamily;
  src: url($eotFileSrc)  format('eot'),
       url($woffFileSrc) format('woff'),
       url($ttfFileSrc)  format('truetype');
}

/* OUTLINE RADIUS */
@mixin outline-radius($radius: 5px) {
    -webkit-outline-radius: $radius;
    -moz-outline-radius:    $radius;
    outline-radius:         $radius;
}

/* RESIZE */
@mixin resize($direction: both) {
    -webkit-resize: $direction;
    -moz-resize:    $direction;
    resize:         $direction;
}

/* ROTATE*/
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
     -moz-transform: rotate($deg + deg);
       -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
      -ms-transform: rotate($deg + deg);
          transform: rotate($deg + deg);
               zoom: 1;
}

/* TEXT SHADOW */
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

/* TRANSFORM  */
@mixin transform($params) {
    -webkit-transform: $params;
    -moz-transform:    $params;
    -ms-transform:     $params;
    -o-transform:      $params;
    transform:         $params;
}

/* TRANSITION */
// @mixin transition($what: all, $length: 1s, $easing: ease-in-out, $delay: 0s) {
//     -moz-transition:    $what $length $easing $delay;
//     -o-transition:      $what $length $easing $delay;
//     -webkit-transition: $what $length $easing $delay;
//     -ms-transition:     $what $length $easing $delay;
//     transition:         $what $length $easing $delay;
//
// }

@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  -webkit-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}

@function unfoldTransition ($transition) {
  // Default values
  $property: all;
  $duration: .2s;
  $easing: null; // Browser default is ease, which is what we want
  $delay: null; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

/* TRIPLE BORDERS */
@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {
    border: 1px solid $colorOne;

    @include border-radius($radius);

    -webkit-box-shadow: 0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
    -moz-box-shadow:    0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
    box-shadow:         0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
}

/* TRANSLATE 3D */
@mixin translate3d($x,$y,$z){
    -moz-transform: translate3d($x,$y,$z);
    -webkit-transform: translate3d($x,$y,$z);
    -o-transform: translate3d($x,$y,$z);
    -ms-transform: translate3d($x,$y,$z);
    transform: translate3d($x,$y,$z);
}

@mixin double-background-gradient-image($startColor: #3C3C3C, $endColor: #999999 , $image:'') {
  background: url($image); /* Old browsers */
  background: url($image), -moz-radial-gradient(center, ellipse cover, $startColor 0%, $endColor 100%); /* FF3.6+ */
  background: url($image), -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$startColor), color-stop(100%,$endColor)); /* Chrome,Safari4+ */
  background: url($image), -webkit-radial-gradient(center, ellipse cover, $startColor 0%,$endColor 100%); /* Chrome10+,Safari5.1+ */
  background: url($image), -o-radial-gradient(center, ellipse cover, $startColor 0%,$endColor 100%); /* Opera 12+ */
  background: url($image), -ms-radial-gradient(center, ellipse cover, $startColor 0%,$endColor 100%); /* IE10+ */
  background: url($image), radial-gradient(ellipse at center, $startColor 0%,$endColor 100%); /* W3C */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startColor', endColorstr='$endColor',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
}

@mixin box-scale($scale){
  -webkit-transform: scale($scale);
     -moz-transform: scale($scale);
      -ms-transform: scale($scale);
       -o-transform: scale($scale);
          transform: scale($scale);
}
@mixin box-scale-x($scale){
  -webkit-transform: scaleX($scale);
     -moz-transform: scaleX($scale);
      -ms-transform: scaleX($scale);
       -o-transform: scaleX($scale);
          transform: scaleX($scale);
}

@mixin animate-steps($name, $time: 5s , $count : infinite , $direction: normal){
    -webkit-animation: $name $time $count $direction; /* Safari 4+ */
    -moz-animation:    $name $time $count $direction; /* Fx 5+ */
    -o-animation:      $name $time $count $direction; /* Opera 12+ */
    animation:         $name $time $count $direction; /* IE 10+, Fx 29+ */
}

@mixin keyframe($name) {
  @-webkit-keyframes #{$name}
    @content
  @-moz-keyframes #{$name}
    @content
  @-ms-keyframes #{$name}
    @content
  @keyframes #{$name}
    @content
}

@mixin noselect() {
  -moz-user-select:none;
  -khtml-user-select:none;
  -webkit-user-select:none;
  -o-user-select:none;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-touch-callout: none;
}

// Breaakpoints Mixin
$min: min-width;
$max: max-width;
@mixin mq($mqsize) {
  @if $mqsize == 'xs' {
    // mobile
    $viewsize: $size-xs;
  } @else if $mqsize == 's' {
    $viewsize: $size-s;
  } @else if $mqsize == 'ms' {
    // tablet
    $viewsize: $size-ms;
  } @else if $mqsize == 'm' {
    $viewsize: $size-m;
  } @else if $mqsize == 'hero' {
    $viewsize: $size-hero;
  } @else if $mqsize == 'ls' {
    // desktop
    $viewsize: $size-ls;
  } @else if $mqsize == 'l' {
    $viewsize: $size-l;
  } @else if $mqsize == 'xl' {
    // wide
    $viewsize: $size-xl;
  } @else if $mqsize == 'xxl' {
    $viewsize: $size-xxl;
  }
  @include mediaQuery($min, $viewsize){
     @content;
  };
}

@mixin mediaQuery($constraint, $viewport1: null, $viewport2: null) {
  @if $constraint == $min {
    @media screen and ($min: $viewport1) {
      @content;
    }
  } @else if $constraint == $max {
    @media screen and ($max: $viewport1) {
      @content;
    }
  } @else if $constraint == retina {
    /****** RETINA MEDIA QUERIES **********************/
    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   min--moz-device-pixel-ratio: 2),
    only screen and (     -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (                min-resolution: 192dpi),
    only screen and (                min-resolution: 2dppx) {
      @content;
    }
  } @else {
    @media screen and ($min: $viewport1) and ($max: $viewport2) {
      @content;
    }
  }
}
